@page "/Items"
@using InvestmentsApp.Client.Components
@using InvestmentsApp.Client.Models.Item
@using InvestmentsApp.Client.Models.PagedList
@using InvestmentsApp.Client.Models.PriceHistory
@using Microsoft.AspNetCore.WebUtilities

<MudButton
    Href="/Items/Create">
    Добавить
</MudButton>

<MudDataGrid
    Dense
    SortMode="SortMode.None"
    @ref="_dataGrid"
    ServerData="FetchItems"
    T="ItemViewModel">
    <Columns>
        <HierarchyColumn/>
        <PropertyColumn
            Class="w-25"
            Title="Id"
            Editable="false"
            Property="x => x.Id">
        </PropertyColumn>

        <PropertyColumn
            Editable="true"
            Title="Название"
            Property="x => x.Name">
        </PropertyColumn>

        <PropertyColumn
            Editable="true"
            Title="Тип предмета"
            Property="x => x.ItemTypeName">
        </PropertyColumn>

        <PropertyColumn
            Editable="true"
            Title="Качество"
            Property="x => x.QualityName">
        </PropertyColumn>
        
        <PropertyColumn
            Editable="true"
            Title="Имя на маркете"
            Property="x => x.NameOnMarket">
        </PropertyColumn>
        
        <PropertyColumn
            Editable="true"
            Title="Цена"
            Property="x => x.LastPrice">
        </PropertyColumn>

        <TemplateColumn>
            <CellTemplate>
                <MudStack
                    Justify="Justify.FlexEnd"
                    Row>
                    <MudTooltip Text="Редактировать">
                        <MudIconButton
                            OnClick="@context.Actions.StartEditingItemAsync"
                            Icon="@Icons.Material.Outlined.Edit">
                        </MudIconButton>
                    </MudTooltip>

                    <MudTooltip Text="Установить текущую цену">
                        <MudIconButton
                            OnClick="() => SetNewPrice(context.Item.Id)"
                            Icon="@Icons.Material.Filled.AttachMoney">
                        </MudIconButton>
                    </MudTooltip>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <ChildRowContent>
        <PriceHistory ItemId="context.Item.Id"></PriceHistory>
    </ChildRowContent>
    <PagerContent>
        <MudDataGridPager/>
    </PagerContent>
</MudDataGrid>

@code {
    [Inject] private IHttpClientFactory HttpClientFactory { get; set; } = null!;
    [Inject] private ISnackbar Snackbar { get; set; } = null!;
    [Inject] private IDialogService DialogService { get; set; } = null!;

    private HttpClient _httpClient = null!;
    private MudDataGrid<ItemViewModel> _dataGrid = new();
    
    protected override async Task OnInitializedAsync()
    {
        _httpClient = HttpClientFactory.CreateClient("InvestmentBackendConfig");
        
        StateHasChanged();
    }
    
    private async Task SetNewPrice(Guid id)
    {
        var dialogResult = await OpenDialogAsync();
        
        if (dialogResult is { Canceled : true } || dialogResult.Data is not decimal newPrice)
        {
            Snackbar.Add("Ошибка диалогового окна");
            return;
        }
        
        var newPriceResponse = await _httpClient.PostAsJsonAsync($"/api/item/{id}", new NewPriceRequest(newPrice));

        if (!newPriceResponse.IsSuccessStatusCode)
        {
            Snackbar.Add("Ошибка Api");
            return;
        }

        await _dataGrid.ReloadServerData();
        StateHasChanged();
    }

    private async Task<GridData<ItemViewModel>> FetchItems(GridState<ItemViewModel> state)
    {
        var queryParams = new Dictionary<string, string?>();
        
        queryParams.Add("pageIndex", state.Page.ToString());
        queryParams.Add("pageSize", state.PageSize.ToString());
        
        var url = QueryHelpers.AddQueryString("/api/item/paged", queryParams);
        
        var itemsResponse = await _httpClient.GetAsync(url);

        if (!itemsResponse.IsSuccessStatusCode)
        {
            Snackbar.Add("Ошибка Api");
            return new();
        }

        var items = await itemsResponse.Content.ReadFromJsonAsync<PagedList<ItemViewModel>>();
        if (items is null)
        {
            Snackbar.Add("Ошибка при обработке данных");
            return new();
        }

        if (items.Subset is null || items.PageSize == 0)
        {
            Snackbar.Add("Нет данных");
            return new();
        }

        return new()
        {
            Items = items.Subset,
            TotalItems = items.PageCount
        };
    }
    
    private async Task<DialogResult?> OpenDialogAsync()
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Введите новую цену" },
            { "ButtonText", "Сохранить" },
            { "Color", Color.Primary }
        };
        
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true
        };

        var dialogReference = await DialogService.ShowAsync<NewPriceDialog>("Изменение", parameters, options);
        var dialogResult = await dialogReference.Result;

        return dialogResult;
    }
}