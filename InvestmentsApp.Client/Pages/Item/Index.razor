@page "/Items"
@using InvestmentsApp.Client.Models
@using InvestmentsApp.Client.Models.Item
@using InvestmentsApp.Client.Models.PagedList
@using InvestmentsApp.Client.Models.PriceHistory
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.WebUtilities
@implements IAsyncDisposable 

<MudStack
    Justify="Justify.FlexEnd"
    Class="my-5" Row>
    
    @if (_showProgress)
    {
        <MudProgressLinear Value="@_percent" Color="Color.Info" BufferValue="@_percent" Buffer="true" Style="height: 20px"/>
        <MudText Typo="Typo.caption">Обновляется: @_currentItem (@_percent%)</MudText>
    }
    
    @if (_showSuccessMessage)
    {
        <MudAlert Severity="Severity.Success" Elevation="2" Variant="Variant.Filled">
            Всё заебись! Спасибо, что дождались обновления цен.
        </MudAlert>
    }
    
    <MudButton
        OnClick="RefreshAllPrice"
        StartIcon="@Icons.Material.Outlined.Refresh">
        Обновить все цены
    </MudButton>
    
    <MudButton
        Href="/Items/Create"
        StartIcon="@Icons.Material.Outlined.Add">
        Добавить
    </MudButton>
</MudStack>

<MudDataGrid
    Dense
    Bordered
    ReadOnly="false"
    SortMode="SortMode.None"
    @ref="_dataGrid"
    ServerData="FetchItems"
    EditMode="@DataGridEditMode.Form"
    EditTrigger="DataGridEditTrigger.Manual"
    CommittedItemChanges="UpdateItem"
    T="ItemViewModel">
    <Columns>
        <HierarchyColumn/>
        <TemplateColumn Title="Id">
            <CellTemplate>
                <MudTooltip Text="Показать Id">
                    <MudIconButton
                        OnClick="() => ShowId(context.Item.Id)"
                        Icon="@Icons.Material.Outlined.Shower">
                    </MudIconButton>
                </MudTooltip>
            </CellTemplate>
        </TemplateColumn>

        <PropertyColumn
            Editable="true"
            Title="Название"
            Property="x => x.Name">
        </PropertyColumn>

        <PropertyColumn
            Editable="false"
            Title="Тип предмета"
            Property="x => x.ItemTypeName">
        </PropertyColumn>

        <PropertyColumn
            Required="false"
            Editable="false"
            Title="Качество"
            Property="x => x.QualityName">
        </PropertyColumn>
        
        <PropertyColumn
            Required="false"
            Editable="true"
            Title="Имя на маркете"
            Property="x => x.NameOnMarket">
        </PropertyColumn>
        
        <PropertyColumn
            Editable="false"
            Title="Цена"
            Property="x => x.LastPrice">
            <CellTemplate>
                @($"{context.Item.LastPrice} ₽")
            </CellTemplate>
        </PropertyColumn>

        <TemplateColumn>
            <CellTemplate>
                <MudStack
                    Justify="Justify.FlexEnd"
                    Row>
                    <MudTooltip Text="Редактировать">
                        <MudIconButton
                            OnClick="@context.Actions.StartEditingItemAsync"
                            Icon="@Icons.Material.Outlined.Edit">
                        </MudIconButton>
                    </MudTooltip>

                    <MudTooltip Text="Установить текущую цену">
                        <MudIconButton
                            OnClick="() => SetNewPrice(context.Item.Id)"
                            Icon="@Icons.Material.Filled.AttachMoney">
                        </MudIconButton>
                    </MudTooltip>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <ChildRowContent>
        <PriceHistory ItemId="context.Item.Id"></PriceHistory>
    </ChildRowContent>
    <PagerContent>
        <MudDataGridPager/>
    </PagerContent>
</MudDataGrid>

@code {
    [Inject] private IHttpClientFactory HttpClientFactory { get; set; } = null!;
    [Inject] private ISnackbar Snackbar { get; set; } = null!;
    [Inject] private IDialogService DialogService { get; set; } = null!;
    
    private HttpClient _httpClient = null!;
    private MudDataGrid<ItemViewModel> _dataGrid = new();
    
    
    private HubConnection? _hubConnection;
    private double _percent = 0;
    private string _currentItem = "";
    private bool _showProgress = false;
    
    private bool _showSuccessMessage = false;
    private CancellationTokenSource? _successMessageCts;
    
    
    protected override async Task OnInitializedAsync()
    {
        _httpClient = HttpClientFactory.CreateClient("InvestmentBackendConfig");
        
        _hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5555/hubs/price-update")
            .WithAutomaticReconnect()
            .Build();
        
        _hubConnection.On<UpdateProgressModel>("UpdateProgress", async message =>
        {
            _percent = message.Percent;
            _currentItem = message.Item;
            _showProgress = true;

            if (_percent >= 100)
            {
                _showProgress = false;
                _showSuccessMessage = true;

                StateHasChanged();

                _successMessageCts?.Cancel();
                _successMessageCts = new CancellationTokenSource();
                var token = _successMessageCts.Token;

                try
                {
                    await _dataGrid.ReloadServerData();
                    await Task.Delay(5000, token);
                    _showSuccessMessage = false;
                }
                catch (TaskCanceledException)
                {
                    // Игнорируем отмену
                }

                InvokeAsync(StateHasChanged);
            }
            else
            {
                InvokeAsync(StateHasChanged);
            }
        });
        
        await _hubConnection.StartAsync();
        
        StateHasChanged();
    }
    
    private async Task SetNewPrice(Guid id)
    {
        var dialogResult = await OpenDialogAsync();
        
        if (dialogResult is { Canceled : true } || dialogResult.Data is not decimal newPrice)
        {
            Snackbar.Add("Ошибка диалогового окна");
            return;
        }
        
        try
        {
            var newPriceResponse = await _httpClient.PostAsJsonAsync($"/api/item/{id}", new NewPriceRequest(newPrice));

            if (!newPriceResponse.IsSuccessStatusCode)
            {
                Snackbar.Add("Ошибка Api");
            }
        }
        finally
        {       
            await _dataGrid.ReloadServerData();
            StateHasChanged();
        }

    }

    private async Task<GridData<ItemViewModel>> FetchItems(GridState<ItemViewModel> state)
    {
        var queryParams = new Dictionary<string, string?>();
        
        queryParams.Add("pageIndex", state.Page.ToString());
        queryParams.Add("pageSize", state.PageSize.ToString());
        
        var url = QueryHelpers.AddQueryString("/api/item/paged", queryParams);
        
        var itemsResponse = await _httpClient.GetAsync(url);

        if (!itemsResponse.IsSuccessStatusCode)
        {
            Snackbar.Add("Ошибка Api");
            return new();
        }

        var items = await itemsResponse.Content.ReadFromJsonAsync<PagedList<ItemViewModel>>();
        if (items is null)
        {
            Snackbar.Add("Ошибка при обработке данных");
            return new();
        }

        if (items.Subset is null || items.PageSize == 0)
        {
            Snackbar.Add("Нет данных");
            return new();
        }

        return new()
        {
            Items = items.Subset,
            TotalItems = items.TotalItemCount
        };
    }
    
    private async Task<DialogResult?> OpenDialogAsync()
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Введите новую цену" },
            { "ButtonText", "Сохранить" },
            { "Color", Color.Primary }
        };
        
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true
        };

        var dialogReference = await DialogService.ShowAsync<NewPriceDialog>("Изменение", parameters, options);
        var dialogResult = await dialogReference.Result;

        return dialogResult;
    }

    private async Task UpdateItem(ItemViewModel itemViewModel)
    {
        var isItemExistOnMarket = await TryFindItemOnMarket(itemViewModel.NameOnMarket);
        if (!isItemExistOnMarket)
        {
            Snackbar.Add("Не удалось найти предмет на маркете");
            return;
        }
        
        var createModel = new ItemCreateModel()
        {
            ItemTypeId = itemViewModel.ItemTypeId,
            MarketName = itemViewModel.NameOnMarket,
            Name = itemViewModel.Name,
            QualityId = itemViewModel.QualityId
        };

        try
        {
            var newPriceResponse = await _httpClient.PutAsJsonAsync($"/api/item/{itemViewModel.Id}", createModel);

            if (!newPriceResponse.IsSuccessStatusCode)
            {
                Snackbar.Add("Ошибка Api");
            }
        }
        finally
        {
            await _dataGrid.ReloadServerData();
            StateHasChanged();
        }

    }
    
    private async Task<bool> TryFindItemOnMarket(string marketName)
    {
        var queryParams = new Dictionary<string, string?>();
        
        queryParams.Add("query", marketName);
        var url = QueryHelpers.AddQueryString("/api/market/", queryParams);
        var marketResponse = await _httpClient.GetAsync(url);

        if (!marketResponse.IsSuccessStatusCode)
        {
            Snackbar.Add("Ошибка Api");
            return false;
        }

        var result = await marketResponse.Content.ReadFromJsonAsync<bool>();
        return result;
    }

    private async Task RefreshAllPrice()
    {
        var marketResponse = await _httpClient.PostAsync("/api/item/refresh-price", null);

        if (!marketResponse.IsSuccessStatusCode)
        {
            Snackbar.Add("Ошибка Api");
        }
    }
    
    private async Task ShowId(Guid id)
    {
        var parameters = new DialogParameters { ["Id"] = id };
        await DialogService.ShowMessageBox("Идентификатор", $"Id: {id}");
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

}