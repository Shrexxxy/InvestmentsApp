@page "/"
@using InvestmentsApp.Client.Models.ItemTypes
@using InvestmentsApp.Client.Pages.Purchase

<MudPaper Class="p-4 mb-4" Elevation="2">
    <MudStack Spacing="1">
        <MudText Typo="Typo.h6" Color="Color.Primary">
            Общая сумма вложений: @_totalAmount.ToString("N2") ₽
        </MudText>

        <MudText Typo="Typo.h6" Color="Color.Primary">
            Текущая стоимость всех предметов: @_currentAmount.ToString("N2") ₽
        </MudText>

        @{
            var diff = _currentAmount - _totalAmount;
            var percent = _totalAmount == 0 ? 0 : (diff / _totalAmount) * 100;
            var isProfit = diff >= 0;
            var color = isProfit ? Color.Success : Color.Error;
            var sign = isProfit ? "+" : "";
        }

        <MudText Typo="Typo.h6" Color="@color">
            Фактическая разница: @($"{sign}{diff:N2} ₽")
        </MudText>

        <MudText Typo="Typo.h6" Color="@color">
            Процент изменения: @($"{sign}{percent:N2}%")
        </MudText>
    </MudStack>
</MudPaper>

<MudStack Row
          Class="pb-4"
          Justify="Justify.SpaceBetween">
    <MudPaper 
        Class="p-4 w-25">
        <MudText
            Typo="Typo.h6"
            Class="mb-2">
            Распределение покупок по типу
        </MudText>

        <MudChart
            Height="400px"
            ChartType="ChartType.Pie" 
            InputData="@_values"
            InputLabels="@_labels"/>
    </MudPaper>

    <MudPaper Class="p-4 w-75">
        <MudText
            Typo="Typo.h6"
            Class="mb-2">
            Инвентарь по типам предметов
        </MudText>

        @foreach (var typeGroup in _inventoryByType)
        {
            <MudText Typo="Typo.subtitle1" Color="Color.Primary" Class="mt-2 mb-1">
                @typeGroup.ItemType
            </MudText>

            <MudTable Items="@typeGroup.Items" Dense="true" Hover="true">
                <HeaderContent>
                    <MudTh Class="w-25">Название</MudTh>
                    <MudTh Class="w-25">Количество</MudTh>
                    <MudTh Class="w-25">Цена</MudTh>
                    <MudTh Class="w-25">Сумма</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd Class="w-25">@context.ItemName</MudTd>
                    <MudTd Class="w-25">@context.Quantity</MudTd>
                    <MudTd Class="w-25">@context.LastPrice.ToString("0.##") ₽</MudTd>
                    <MudTd Class="w-25">@context.TotalPrice.ToString("0.##") ₽</MudTd>
                </RowTemplate>
            </MudTable>
        }
    </MudPaper>
</MudStack>

<PurchaseDataGrid></PurchaseDataGrid>



@code
{
    [Inject] private IHttpClientFactory HttpClientFactory { get; set; } = null!;
    [Inject] private ISnackbar Snackbar { get; set; } = null!;
    [Inject] private IDialogService DialogService { get; set; } = null!;

    private decimal _totalAmount;
    private decimal _currentAmount;
    private List<ItemTypeInventoryDto> _inventoryByType = new();
    
    private string[] _labels = Array.Empty<string>();
    private double[] _values = Array.Empty<double>();
    
    
    private HttpClient _httpClient = null!;
    
    protected override async Task OnInitializedAsync()
    {
        _httpClient = HttpClientFactory.CreateClient("InvestmentBackendConfig");

        GetTotalAmount();
        GetCurrentAmount();
        GetPurchasedItemTypeStats();
        GetInventorySummary();
        
        StateHasChanged();
    }

    private async Task GetTotalAmount()
    {
        var totalAmountResponse = await _httpClient.GetAsync("/api/purchase/total-amount");

        if (!totalAmountResponse.IsSuccessStatusCode)
        {
            Snackbar.Add("Ошибка Api");
            return;
        }
        
        _totalAmount = await totalAmountResponse.Content.ReadFromJsonAsync<decimal>();

        StateHasChanged();
    }

    private async Task GetCurrentAmount()
    {
        var totalAmountResponse = await _httpClient.GetAsync("/api/purchase/current-amount");

        if (!totalAmountResponse.IsSuccessStatusCode)
        {
            Snackbar.Add("Ошибка Api");
            return;
        }
        
        _currentAmount = await totalAmountResponse.Content.ReadFromJsonAsync<decimal>();

        StateHasChanged();
    }
    
    private async Task GetPurchasedItemTypeStats()
    {
        var itemTypeStatsResponse = await _httpClient.GetAsync("/api/purchase/item-type-stats");

        if (!itemTypeStatsResponse.IsSuccessStatusCode)
        {
            Snackbar.Add("Ошибка Api");
            return;
        }
        
        var itemStats = await itemTypeStatsResponse.Content.ReadFromJsonAsync<List<ItemTypeStatDto>>();
        
        _labels = itemStats.Select(x => x.ItemType).ToArray();
        _values = itemStats.Select(x => (double)x.Count).ToArray();
        
        StateHasChanged();
    }
    
    private async Task GetInventorySummary()
    {
        var response = await _httpClient.GetAsync("/api/purchase/inventory-summary");

        if (!response.IsSuccessStatusCode)
        {
            Snackbar.Add("Ошибка при получении инвентаря", Severity.Error);
            return;
        }

        var inventory = await response.Content.ReadFromJsonAsync<List<ItemTypeInventoryDto>>();
        _inventoryByType = inventory ?? new();
        
        StateHasChanged();
    }
}
